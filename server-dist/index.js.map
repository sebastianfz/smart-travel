{"version":3,"sources":["../server/index.js"],"names":["connect","db","connection","on","console","log","process","exit","app","server","createServer","use","req","res","next","header","method","status","end","json","limit","bodyLimit","static","join","__dirname","get","sendfile","resolve","all","listen","env","PORT","port","address"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;AACA;;;;;;AACA;;;;AAIA,mBAASA,OAAT,CAAiB,iBAAOC,EAAxB,E,CAA6B;AAC7B,mBAASC,UAAT,CAAoBC,EAApB,CAAuB,OAAvB,EAAgC,YAAY;AACxCC,YAAQC,GAAR,CAAY,qEAAZ;AACAC,YAAQC,IAAR,CAAa,CAAb;AACH,CAHD;;AAKA,IAAIC,MAAM,wBAAV;AACAA,IAAIC,MAAJ,GAAa,eAAKC,YAAL,CAAkBF,GAAlB,CAAb;;AAEA;AACAA,IAAIG,GAAJ,CAAQ,sBAAO,KAAP,CAAR;;AAEA;AACA;AACA;AACA;;AAEAH,IAAIG,GAAJ,CAAQ,UAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAoB;AACxB;AACAD,QAAIE,MAAJ,CAAW,6BAAX,EAA0C,GAA1C,EAFwB,CAEwB;AAChDF,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,6BAA3C;AACA;AACAF,QAAIE,MAAJ,CAAW,8BAAX,EAA2C,0CAA3C;AACA,QAAIH,IAAII,MAAJ,IAAc,SAAlB,EAA6B;AACzBH,YAAII,MAAJ,CAAW,GAAX,EAAgBC,GAAhB;AACH,KAFD,MAEO;AACHJ;AACH;AACJ,CAXD;;AAaAN,IAAIG,GAAJ,CAAQ,qBAAWQ,IAAX,CAAgB;AACpBC,WAAO,iBAAOC;AADM,CAAhB,CAAR;;AAIAb,IAAIG,GAAJ,CAAQ,kBAAQW,MAAR,CAAe,eAAKC,IAAL,CAAUC,SAAV,EAAqB,MAArB,CAAf,CAAR;;AAIA;AACAhB,IAAIG,GAAJ,CAAQ,MAAR,EAAgB,uBAAhB;;AAGAH,IAAIiB,GAAJ,CAAQ,GAAR,EAAa,UAACb,GAAD,EAAMC,GAAN,EAAc;AACvBA,QAAIa,QAAJ,CAAa,eAAKC,OAAL,CAAa,OAAO,iBAApB,CAAb;AACH,CAFD;;AAIAnB,IAAIoB,GAAJ,CAAQ,IAAR,EAAc,UAAChB,GAAD,EAAMC,GAAN,EAAc;AAC1BA,QAAIa,QAAJ,CAAa,eAAKC,OAAL,CAAa,OAAO,iBAApB,CAAb;AACD,CAFD;;AAKAnB,IAAIC,MAAJ,CAAWoB,MAAX,CAAkBvB,QAAQwB,GAAR,CAAYC,IAAZ,IAAoB,iBAAOC,IAA7C,EAAmD,YAAM;AACrD5B,YAAQC,GAAR,sBAA+BG,IAAIC,MAAJ,CAAWwB,OAAX,GAAqBD,IAApD;AACH,CAFD;;kBAKexB,G","file":"index.js","sourcesContent":["import http from 'http';\r\nimport express from 'express';\r\nimport cors from 'cors';\r\nimport morgan from 'morgan';\r\nimport bodyParser from 'body-parser';\r\nimport routes from './routes';\r\nimport config from './config/config';\r\nimport path from 'path';\r\nimport mongoose from 'mongoose';\r\n/**\r\n * Configure database\r\n */\r\n\r\nmongoose.connect(config.db); // Connects to your MongoDB.  Make sure mongod is running!\r\nmongoose.connection.on('error', function () {\r\n    console.log('MongoDB Connection Error. Please make sure that MongoDB is running.');\r\n    process.exit(1);\r\n});\r\n\r\nlet app = express();\r\napp.server = http.createServer(app);\r\n\r\n// logger\r\napp.use(morgan('dev'));\r\n\r\n// 3rd party middleware\r\n// app.use(cors({\r\n//     exposedHeaders: config.corsHeaders\r\n// }));\r\n\r\napp.use((req, res, next) => {\r\n    // CORS headers\r\n    res.header(\"Access-Control-Allow-Origin\", \"*\"); // restrict it to the required domain\r\n    res.header('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS');\r\n    // Set custom headers for CORS\r\n    res.header('Access-Control-Allow-Headers', 'Content-type,Accept,X-Access-Token,X-Key');\r\n    if (req.method == 'OPTIONS') {\r\n        res.status(200).end();\r\n    } else {\r\n        next();\r\n    }\r\n});\r\n\r\napp.use(bodyParser.json({\r\n    limit: config.bodyLimit\r\n}));\r\n\r\napp.use(express.static(path.join(__dirname, 'dist')));\r\n\r\n\r\n\r\n// api router\r\napp.use('/api', routes());\r\n\r\n\r\napp.get('/', (req, res) => {\r\n    res.sendfile(path.resolve(\"./\" + 'dist/index.html'));\r\n});\r\n\r\napp.all('/*', (req, res) => {\r\n  res.sendfile(path.resolve(\"./\" + 'dist/index.html'));\r\n});\r\n\r\n\r\napp.server.listen(process.env.PORT || config.port, () => {\r\n    console.log(`Started on port ${app.server.address().port}`);\r\n});\r\n\r\n\r\nexport default app;\r\n"]}