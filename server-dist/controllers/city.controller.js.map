{"version":3,"sources":["../../server/controllers/city.controller.js"],"names":["cityController","getAllCities","req","res","find","err","cities","send","json","getTopCities","limit","exec","getCity","findOne","_id","params","id","city","addCity","console","log","body","save","text","done","saveCity","data","update","$set","updateCity","deleteCity","isActive"],"mappings":";;;;;;AACA;;;;;;AAAmC;;AAEnC,IAAIA,iBAAiB;;AAEjBC,kBAAc,sBAACC,GAAD,EAAMC,GAAN,EAAc;AACxB,uBAAKC,IAAL,CAAU,EAAV,EAAc,UAACC,GAAD,EAAMC,MAAN,EAAiB;AAC3B,gBAAID,GAAJ,EAAS;AACL;AACA,uBAAOF,IAAII,IAAJ,CAASF,GAAT,CAAP;AACH;AACD;AACAF,gBAAIK,IAAJ,CAASF,MAAT;AACH,SAPD;AAQH,KAXgB;;AAajBG,kBAAc,sBAACP,GAAD,EAAMC,GAAN,EAAc;AACxB,uBAAKC,IAAL,CAAU,EAAV,EAAcM,KAAd,CAAoB,CAApB,EAAuBC,IAAvB,CAA4B,UAACN,GAAD,EAAMC,MAAN,EAAiB;AACzC,gBAAID,GAAJ,EAAS;AACL;AACA,uBAAOF,IAAII,IAAJ,CAASF,GAAT,CAAP;AACH;AACD;AACAF,gBAAIK,IAAJ,CAASF,MAAT;AACH,SAPD;AAQH,KAtBgB;;AAwBjBM,aAAS,iBAACV,GAAD,EAAMC,GAAN,EAAc;AACnB,uBAAKU,OAAL,CAAa,EAAEC,KAAKZ,IAAIa,MAAJ,CAAWC,EAAlB,EAAb,EAAqC,UAACX,GAAD,EAAMY,IAAN,EAAe;AAChD,gBAAIZ,GAAJ,EAAS;AACL;AACA,uBAAOF,IAAII,IAAJ,CAASF,GAAT,CAAP;AACH;AACD;AACAF,gBAAIK,IAAJ,CAASS,IAAT;AACH,SAPD;AAQH,KAjCgB;;AAmCjBC,aAAS,iBAAChB,GAAD,EAAMC,GAAN,EAAc;AACnBgB,gBAAQC,GAAR,CAAYlB,IAAIe,IAAhB;AACA,YAAIA,OAAO,mBAASf,IAAImB,IAAb,CAAX;AACAJ,aAAKK,IAAL,CAAU;AACNC,kBAAMrB,IAAImB,IAAJ,CAASE,IADT;AAENC,kBAAM;AAFA,SAAV,EAGG,UAACnB,GAAD,EAAMY,IAAN,EAAe;AACd,gBAAIZ,GAAJ,EAAS;AACL,uBAAOF,IAAII,IAAJ,CAASF,GAAT,CAAP;AACH;AACDF,gBAAIK,IAAJ,CAASS,IAAT;AACH,SARD;AASH,KA/CgB;;AAiDjBQ,cAAU,kBAACC,IAAD,EAAOV,EAAP,EAAc;AACpB,uBAAKW,MAAL,CAAY;AACRb,iBAAKE;AADG,SAAZ,EAEG,EAAEY,MAAMF,IAAR,EAFH,EAEmB,UAACrB,GAAD,EAAMY,IAAN,EAAe;AAC9B,gBAAIZ,GAAJ,EAAS;AACL,uBAAOF,IAAII,IAAJ,CAASF,GAAT,CAAP;AACH;AACDF,gBAAIK,IAAJ,CAASS,IAAT;AACH,SAPD;AAQH,KA1DgB;;AA4DjBY,gBAAY,oBAAC3B,GAAD,EAAMC,GAAN,EAAc;AACtB,YAAIa,KAAKd,IAAIa,MAAJ,CAAWC,EAApB;AACA,YAAIU,OAAOxB,IAAImB,IAAf;AACAI,iBAASC,IAAT,EAAeV,EAAf;AACH,KAhEgB;;AAkEjBc,gBAAY,oBAAC5B,GAAD,EAAMC,GAAN,EAAc;AACtB,uBAAKU,OAAL,CAAa,EAAEC,KAAKZ,IAAIa,MAAJ,CAAWC,EAAlB,EAAb,EAAqC,UAACX,GAAD,EAAMY,IAAN,EAAe;AAChD,gBAAIZ,GAAJ,EAAS;AACL,uBAAOF,IAAII,IAAJ,CAASF,GAAT,CAAP;AACH;AACDY,iBAAKc,QAAL,GAAgB,KAAhB;AACAN,qBAASC,IAAT,EAAexB,IAAIa,MAAJ,CAAWC,EAA1B;AACH,SAND;AAOH;AA1EgB,CAArB,C,CAHA;kBAgFehB,c","file":"city.controller.js","sourcesContent":["// src/controllers/main.js\r\nimport City from '../models/city'; // Import the Todo model so we can query the DB\r\n\r\nlet cityController = {\r\n\r\n    getAllCities: (req, res) => {\r\n        City.find({}, (err, cities) => {\r\n            if (err) {\r\n                // Send the error to the client if there is one\r\n                return res.send(err);\r\n            }\r\n            // Send todos in JSON format\r\n            res.json(cities);\r\n        });\r\n    },\r\n\r\n    getTopCities: (req, res) => {\r\n        City.find({}).limit(5).exec((err, cities) => {\r\n            if (err) {\r\n                // Send the error to the client if there is one\r\n                return res.send(err);\r\n            }\r\n            // Send todos in JSON format\r\n            res.json(cities);\r\n        })\r\n    },\r\n\r\n    getCity: (req, res) => {\r\n        City.findOne({ _id: req.params.id }, (err, city) => {\r\n            if (err) {\r\n                // Send the error to the client if there is one\r\n                return res.send(err);\r\n            }\r\n            // Send todos in JSON format\r\n            res.json(city);\r\n        });\r\n    },\r\n\r\n    addCity: (req, res) => {\r\n        console.log(req.city);\r\n        let city = new City(req.body);\r\n        city.save({\r\n            text: req.body.text,\r\n            done: false\r\n        }, (err, city) => {\r\n            if (err) {\r\n                return res.send(err);\r\n            }\r\n            res.json(city);\r\n        });\r\n    },\r\n\r\n    saveCity: (data, id) => {\r\n        City.update({\r\n            _id: id\r\n        }, { $set: data }, (err, city) => {\r\n            if (err) {\r\n                return res.send(err);\r\n            }\r\n            res.json(city);\r\n        });\r\n    },\r\n\r\n    updateCity: (req, res) => {\r\n        let id = req.params.id;\r\n        let data = req.body;\r\n        saveCity(data, id);\r\n    },\r\n\r\n    deleteCity: (req, res) => {\r\n        City.findOne({ _id: req.params.id }, (err, city) => {\r\n            if (err) {\r\n                return res.send(err);\r\n            }\r\n            city.isActive = false;\r\n            saveCity(data, req.params.id);\r\n        });\r\n    }\r\n}\r\n\r\nexport default cityController;"]}